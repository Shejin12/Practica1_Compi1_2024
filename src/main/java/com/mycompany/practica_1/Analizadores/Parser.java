
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.practica_1.Analizadores;

import java_cup.runtime.*;
import java.awt.Color;
import com.mycompany.practica_1.Analizadores.Lexer;
import com.mycompany.practica_1.Front.Graficos;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\002\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\002\000\002\004\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\003\017\000\002\003\017\000\002\003\021\000\002\003" +
    "\021\000\002\003\023\000\002\005\016\000\002\005\016" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\010\002\ufffe\021\004\022\005\001\002\000" +
    "\014\013\056\014\060\015\054\016\055\020\057\001\002" +
    "\000\004\023\014\001\002\000\010\002\ufffe\021\004\022" +
    "\005\001\002\000\010\002\ufffe\021\004\022\005\001\002" +
    "\000\004\002\011\001\002\000\004\002\001\001\002\000" +
    "\004\002\000\001\002\000\004\002\uffff\001\002\000\004" +
    "\024\015\001\002\000\004\025\016\001\002\000\006\017" +
    "\017\020\020\001\002\000\004\027\045\001\002\000\004" +
    "\027\021\001\002\000\010\004\024\005\023\025\025\001" +
    "\002\000\014\007\030\010\027\011\032\012\031\027\040" +
    "\001\002\000\016\007\ufffc\010\ufffc\011\ufffc\012\ufffc\026" +
    "\ufffc\027\ufffc\001\002\000\016\007\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\026\ufffb\027\ufffb\001\002\000\010\004\024\005" +
    "\023\025\025\001\002\000\014\007\030\010\027\011\032" +
    "\012\031\026\033\001\002\000\010\004\024\005\023\025" +
    "\025\001\002\000\010\004\024\005\023\025\025\001\002" +
    "\000\010\004\024\005\023\025\025\001\002\000\010\004" +
    "\024\005\023\025\025\001\002\000\016\007\ufff6\010\ufff6" +
    "\011\ufff6\012\ufff6\026\ufff6\027\ufff6\001\002\000\016\007" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\026\ufff8\027\ufff8\001\002" +
    "\000\016\007\ufff7\010\ufff7\011\ufff7\012\ufff7\026\ufff7\027" +
    "\ufff7\001\002\000\016\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\026\ufffa\027\ufffa\001\002\000\016\007\ufff9\010\ufff9\011" +
    "\ufff9\012\ufff9\026\ufff9\027\ufff9\001\002\000\010\004\024" +
    "\005\023\025\025\001\002\000\014\007\030\010\027\011" +
    "\032\012\031\027\042\001\002\000\010\004\024\005\023" +
    "\025\025\001\002\000\014\007\030\010\027\011\032\012" +
    "\031\026\044\001\002\000\010\002\ufff0\021\ufff0\022\ufff0" +
    "\001\002\000\010\004\024\005\023\025\025\001\002\000" +
    "\014\007\030\010\027\011\032\012\031\027\047\001\002" +
    "\000\010\004\024\005\023\025\025\001\002\000\014\007" +
    "\030\010\027\011\032\012\031\027\051\001\002\000\010" +
    "\004\024\005\023\025\025\001\002\000\014\007\030\010" +
    "\027\011\032\012\031\026\053\001\002\000\010\002\uffef" +
    "\021\uffef\022\uffef\001\002\000\004\025\144\001\002\000" +
    "\004\025\125\001\002\000\004\025\112\001\002\000\004" +
    "\025\075\001\002\000\004\025\061\001\002\000\004\030" +
    "\062\001\002\000\004\027\063\001\002\000\010\004\024" +
    "\005\023\025\025\001\002\000\014\007\030\010\027\011" +
    "\032\012\031\027\065\001\002\000\010\004\024\005\023" +
    "\025\025\001\002\000\014\007\030\010\027\011\032\012" +
    "\031\027\067\001\002\000\010\004\024\005\023\025\025" +
    "\001\002\000\014\007\030\010\027\011\032\012\031\027" +
    "\071\001\002\000\004\006\072\001\002\000\004\026\ufffd" +
    "\001\002\000\004\026\074\001\002\000\010\002\ufff4\021" +
    "\ufff4\022\ufff4\001\002\000\004\030\076\001\002\000\004" +
    "\027\077\001\002\000\010\004\024\005\023\025\025\001" +
    "\002\000\014\007\030\010\027\011\032\012\031\027\101" +
    "\001\002\000\010\004\024\005\023\025\025\001\002\000" +
    "\014\007\030\010\027\011\032\012\031\027\103\001\002" +
    "\000\010\004\024\005\023\025\025\001\002\000\014\007" +
    "\030\010\027\011\032\012\031\027\105\001\002\000\010" +
    "\004\024\005\023\025\025\001\002\000\014\007\030\010" +
    "\027\011\032\012\031\027\107\001\002\000\004\006\072" +
    "\001\002\000\004\026\111\001\002\000\010\002\ufff2\021" +
    "\ufff2\022\ufff2\001\002\000\004\030\113\001\002\000\004" +
    "\027\114\001\002\000\010\004\024\005\023\025\025\001" +
    "\002\000\014\007\030\010\027\011\032\012\031\027\116" +
    "\001\002\000\010\004\024\005\023\025\025\001\002\000" +
    "\014\007\030\010\027\011\032\012\031\027\120\001\002" +
    "\000\010\004\024\005\023\025\025\001\002\000\014\007" +
    "\030\010\027\011\032\012\031\027\122\001\002\000\004" +
    "\006\072\001\002\000\004\026\124\001\002\000\010\002" +
    "\ufff5\021\ufff5\022\ufff5\001\002\000\004\030\126\001\002" +
    "\000\004\027\127\001\002\000\010\004\024\005\023\025" +
    "\025\001\002\000\014\007\030\010\027\011\032\012\031" +
    "\027\131\001\002\000\010\004\024\005\023\025\025\001" +
    "\002\000\014\007\030\010\027\011\032\012\031\027\133" +
    "\001\002\000\010\004\024\005\023\025\025\001\002\000" +
    "\014\007\030\010\027\011\032\012\031\027\135\001\002" +
    "\000\010\004\024\005\023\025\025\001\002\000\014\007" +
    "\030\010\027\011\032\012\031\027\137\001\002\000\010" +
    "\004\024\005\023\025\025\001\002\000\014\007\030\010" +
    "\027\011\032\012\031\027\141\001\002\000\004\006\072" +
    "\001\002\000\004\026\143\001\002\000\010\002\ufff1\021" +
    "\ufff1\022\ufff1\001\002\000\004\030\145\001\002\000\004" +
    "\027\146\001\002\000\010\004\024\005\023\025\025\001" +
    "\002\000\014\007\030\010\027\011\032\012\031\027\150" +
    "\001\002\000\010\004\024\005\023\025\025\001\002\000" +
    "\014\007\030\010\027\011\032\012\031\027\152\001\002" +
    "\000\010\004\024\005\023\025\025\001\002\000\014\007" +
    "\030\010\027\011\032\012\031\027\154\001\002\000\010" +
    "\004\024\005\023\025\025\001\002\000\014\007\030\010" +
    "\027\011\032\012\031\027\156\001\002\000\004\006\072" +
    "\001\002\000\004\026\160\001\002\000\010\002\ufff3\021" +
    "\ufff3\022\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\010\003\006\005\005\006\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\006\005\005" +
    "\006\012\001\001\000\010\003\006\005\005\006\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\025\001\001\000\002\001\001" +
    "\000\004\002\036\001\001\000\004\002\035\001\001\000" +
    "\004\002\034\001\001\000\004\002\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\040\001\001\000\002" +
    "\001\001\000\004\002\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\045\001\001\000\002\001\001" +
    "\000\004\002\047\001\001\000\002\001\001\000\004\002" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\063\001\001\000\002\001\001\000\004\002" +
    "\065\001\001\000\002\001\001\000\004\002\067\001\001" +
    "\000\002\001\001\000\004\004\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\077\001\001\000\002\001" +
    "\001\000\004\002\101\001\001\000\002\001\001\000\004" +
    "\002\103\001\001\000\002\001\001\000\004\002\105\001" +
    "\001\000\002\001\001\000\004\004\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\114\001\001\000\002\001\001\000\004" +
    "\002\116\001\001\000\002\001\001\000\004\002\120\001" +
    "\001\000\002\001\001\000\004\004\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\127\001\001\000\002\001\001\000\004" +
    "\002\131\001\001\000\002\001\001\000\004\002\133\001" +
    "\001\000\002\001\001\000\004\002\135\001\001\000\002" +
    "\001\001\000\004\002\137\001\001\000\002\001\001\000" +
    "\004\004\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\146\001" +
    "\001\000\002\001\001\000\004\002\150\001\001\000\002" +
    "\001\001\000\004\002\152\001\001\000\002\001\001\000" +
    "\004\002\154\001\001\000\002\001\001\000\004\004\156" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Variables
    //Objetos
    //Constructores

    private Graficos graficos; 
    public Parser(Lexer lexer, Graficos graficos /*mas cosas*/){
        super(lexer);
        this.graficos = graficos;
        //Inicializar mas objetos
    }





/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instruccion EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instruccion ::= graficar instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instruccion ::= animar instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // color ::= COLOR 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Color col = Color.black; 
    switch((String)color){
        case "amarillo":
            col =  Color.YELLOW;
            break; 
        case "azul":
            col =  Color.BLUE;
            break; 
        case "celeste":
            col = Color.CYAN;
            break; 
        case "morado":
            col =  new Color(124,51,255);
            break; 
        case "naranja":
            col =  Color.ORANGE;
            break; 
        case "rojo":
            col =  Color.RED;
            break; 
        case "rosado":
            col =  Color.PINK;
            break; 
        case "turquesa":
            col =  new Color(88,215,234);
            break; 
        case "verde":
            col =  Color.GREEN;
            break; 
    }
    RESULT = col; 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // entero ::= FLOTANTES 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (int)Math.round((double)numero); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entero",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // entero ::= NUMEROS 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = numero; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entero",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // entero ::= entero SUMA entero 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (int)num1 + (int)num2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entero",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // entero ::= entero RESTA entero 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (int)num1 - (int)num2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entero",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // entero ::= entero MULTI entero 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (int)num1 * (int)num2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entero",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // entero ::= entero DIVISN entero 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (int)num1 / (int)num2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entero",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // entero ::= PAROPN entero PARCLS 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = (int)num; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entero",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // graficar ::= GRAFICAR CIRCULO PAROPN ID COMA entero COMA entero COMA entero COMA color PARCLS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object posx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object posy = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int radioleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int radioright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object radio = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 graficos.graficarCirculo((int)posx, (int)posy, (int)radio, (Color)col); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficar",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // graficar ::= GRAFICAR CUADRADO PAROPN ID COMA entero COMA entero COMA entero COMA color PARCLS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object posx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object posy = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tam = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 graficos.graficarCuadrado((int)posx, (int)posy, (int)tam, (Color)col);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficar",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // graficar ::= GRAFICAR RECTANGULO PAROPN ID COMA entero COMA entero COMA entero COMA entero COMA color PARCLS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object posx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object posy = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object ancho = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object alto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 graficos.graficarRectangulo((int)posx, (int)posy, (int)ancho, (int)alto, (Color)col ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficar",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // graficar ::= GRAFICAR LINEA PAROPN ID COMA entero COMA entero COMA entero COMA entero COMA color PARCLS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object x1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int y1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int y1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object y1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object x2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int y2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int y2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object y2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 graficos.graficarLinea((int)x1, (int)y1, (int)x2, (int)y2, (Color)col); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficar",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // graficar ::= GRAFICAR POLIGONO PAROPN ID COMA entero COMA entero COMA entero COMA entero COMA entero COMA color PARCLS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object posx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object posy = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int cantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int cantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object cant = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object ancho = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object alto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficar",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // animar ::= ANIMAR OBJETO ANTERIOR PAROPN LINEA COMA entero COMA entero COMA entero PARCLS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("animar",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // animar ::= ANIMAR OBJETO ANTERIOR PAROPN CURVA COMA entero COMA entero COMA entero PARCLS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("animar",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
